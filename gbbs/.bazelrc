# This is from Bazel's former travis setup, to avoid blowing up the RAM usage.
startup --host_jvm_args=-Xmx2500m
startup --host_jvm_args=-Xms2500m
# test --ram_utilization_factor=10 # comment-out for github actions.

# This is so we understand failures better
build --verbose_failures

# This is so we don't use sandboxed execution. Sandboxed execution
# runs stuff in a container, and since Travis already runs its script
# in a container (unless you require sudo in your .travis.yml) this
# fails to run tests.
build --spawn_strategy=standalone --genrule_strategy=standalone
test --test_strategy=standalone

# Below this line, .travis.yml will cat the default bazelrc.
# This is needed so Bazel starts with the base workspace in its
# package path.


# By default build in C++17 mode using the Homegrown scheduler for parallelism.
#build --repo_env=CC=clang++-12
#build --repo_env=CC=g++
build --cxxopt=-std=c++17
build --cxxopt=-mcx16        # 16 byte CAS
build --cxxopt=-DHOMEGROWN   # use the homegrown scheduler
build --cxxopt=-DLONG        # use 8 byte vertex identifiers
build --cxxopt=-DAMORTIZEDPD # use amortized_bytepd encoding scheme for compressed graphs
build --cxxopt=-DUSEMALLOC
build --cxxopt=-DPARLAY_USE_STD_ALLOC
build --cxxopt=-Dcilk_scope=
build --cxxopt=-pthread      # necessary for homegrown scheduler
build --cxxopt=-march=native
build --cxxopt=-fvisibility=hidden
build --cxxopt=-fvisibility-inlines-hidden
build --cxxopt=-fsized-deallocation  # https://github.com/pybind/pybind11/issues/1604 (for clang)
build --cxxopt=-I/usr/include/python3.9
build --cxxopt=-g
build --linkopt=-ltcmalloc
build --linkopt=-lprofiler
build -c opt

# C++ warning flags.
build --cxxopt=-Wall
build --cxxopt=-Wextra
build --cxxopt=-Wcast-qual
build --cxxopt=-Wno-unused-parameter
build --cxxopt=-Wpointer-arith
# Turning on -Wshadow rather than just -Wshadow=local would be nice, but the
# codebase currently contains lots of instances of global shadowing.
#build --cxxopt=-Wshadow=local
build --cxxopt=-Wvla

# Build without parallelism.
build:serial --cxxopt=-UHOMEGROWN
build:serial --cxxopt=-DPARLAY_SEQUENTIAL

# Build using OpenCilk for parallelism.
build:cilk --cxxopt=-UHOMEGROWN
build:cilk --cxxopt=-DCILK
build:cilk --cxxopt=-DPARLAY_CILK
build:cilk --cxxopt=-DPARLAY_OPENCILK
build:cilk --cxxopt=-fopencilk
build:cilk --linkopt=-fopencilk
# build:cilk --linkopt=-lnuma

build:cilk_serial --cxxopt=-UHOMEGROWN
build:cilk_serial --cxxopt=-DCILK
build:cilk_serial --cxxopt=-DPARLAY_CILK
build:cilk_serial --cxxopt=-DPARLAY_OPENCILK
build:cilk_serial --cxxopt=-DSERIAL

# Build using CilkPlus for parallelism.
build:cilkplus --cxxopt=-UHOMEGROWN
build:cilkplus --cxxopt=-DCILK
build:cilkplus --cxxopt=-DPARLAY_CILK
build:cilkplus --cxxopt=-DPARLAY_CILKPLUS
build:cilkplus --cxxopt=-fcilkplus
build:cilkplus --linkopt=-fcilkplus
build:cilkplus --linkopt=-L/opt/cilkrts/lib
build:cilkplus --linkopt=-Wl,-rpath,/opt/cilkrts/lib

# Build using OMPTask for parallelism.
build:omptask --cxxopt=-UHOMEGROWN
build:omptask --cxxopt=-DCILK
build:omptask --cxxopt=-DPARLAY_CILK
build:omptask --cxxopt=-DPARLAY_OPENCILK
build:omptask --cxxopt=-fopencilk
build:omptask --cxxopt=-fopenmp
build:omptask --cxxopt=-ftapir=omptask
build:omptask --cxxopt=-mllvm
build:omptask --cxxopt=-omp-bc-path=/usr/local/src/ppopp-23-ae/extra-bitcode-abis/omp-task-rt-abi.bc
build:omptask --cxxopt=-DOMPTASK
build:omptask --cxxopt=-mllvm
build:omptask --cxxopt=-simplifycfg-preserve-all-spawns
build:omptask --cxxopt=-mllvm
build:omptask --cxxopt=-tasksimplify-preserve-all-spawns
build:omptask --linkopt=-fopenmp

# Build using TBB lambda for parallelism.
build:tbbtask --cxxopt=-UHOMEGROWN
build:tbbtask --cxxopt=-DCILK
build:tbbtask --cxxopt=-DPARLAY_CILK
build:tbbtask --cxxopt=-DPARLAY_OPENCILK
build:tbbtask --cxxopt=-fopencilk
build:tbbtask --cxxopt=-ftapir=lambda
build:tbbtask --cxxopt=-mllvm
build:tbbtask --cxxopt=-tapir-runtime-bc-path=/usr/local/src/ppopp-23-ae/extra-bitcode-abis/tbb-bc-abi.bc
build:tbbtask --cxxopt=-DTBBTASK
build:tbbtask --linkopt=-ltbb

build:verbose --cxxopt=-v
build:verbose --linkopt=-v

build:dbgsym --cxxopt=-g
build:dbgsym --cxxopt=-gdwarf-4

# Configurations for changing random-number generation
build:dotmix --cxxopt=-DUSE_DOTMIX
build:dotmix_opencilk --linkopt=-lopencilk-pedigrees

build:dprand --cxxopt=-DUSE_DPRAND
build:dprand --linkopt=-lopencilk-pedigrees

# Build using Cilksan to check for races.
build:cilksan --cxxopt=-fsanitize=cilk
build:cilksan --cxxopt=-O2
build:cilksan --cxxopt=-fno-vectorize
build:cilksan --cxxopt=-fno-stripmine
build:cilksan --cxxopt=-fno-unroll-loops
build:cilksan --cxxopt=-g
build:cilksan --linkopt=-fsanitize=cilk

# Build using Cilkscale to measure scalability.
build:cilkscale --cxxopt=-fcilktool=cilkscale
build:cilkscale --linkopt=-fcilktool=cilkscale

build:cilkscale_bitcode --cxxopt=-mllvm
build:cilkscale_bitcode --cxxopt=-csi-tool-bitcode=/opt/opencilk/lib/clang/14.0.6/lib/x86_64-unknown-linux-gnu/libcilkscale.bc

# Build using OpenMP for parallelism.
build:openmp --cxxopt=-UHOMEGROWN
build:openmp --cxxopt=-DOPENMP
build:openmp --cxxopt=-fopenmp
build:openmp --linkopt=-fopenmp

# Instruments the build with AddressSanitizer
# (https://github.com/google/sanitizers/wiki/AddressSanitizer).
# Invoke by adding the `--config=asan` flag, e.g.,
#     bazel run --config=asan <build target>`
build:asan --strip=never
build:asan --cxxopt=-fsanitize=address
build:asan --cxxopt=-O1
build:asan --cxxopt=-g
build:asan --cxxopt=-fno-omit-frame-pointer
build:asan --cxxopt=-Wno-macro-redefined
build:asan --linkopt=-fsanitize=address
